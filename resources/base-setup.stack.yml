#https://github.com/aanand/compose-file/blob/master/schema/data/config_schema_v3.0.json
version: '3' #http://blog.terranillius.com/post/composev3_swarm/
services:
  #Redis Key-Value Store
  #Die Instanzen der newspage-mongo speichern hier, welche Instanz die Primary-Mongo ist
  redis:
    image: "redis:alpine"

  #Borderproxy, Reverseproxy
  #Leitet Anfragen, anhand des abgefragten Path an die Services weiter
  traefik:
    image: "traefik"
    ports:
     - "!!TRAEFIK_PORT_80!!:80"
     - "!!TRAEFIK_PORT_443!!:443"
     - "0:8080"
    volumes:
     - "/var/run/docker.sock:/var/run/docker.sock:ro"
    command: "--docker --docker.swarmmode --docker.domain=traefik --docker.watch --web"
    deploy:
      mode: "replicated"
      replicas: 2
      placement:
        constraints:
         - "node.role==manager"

  whoami:
    image: "emilevauge/whoami"
    ports:
     - "0:80"
    deploy:
      mode: replicated
      replicas: 1
      labels:
       - "traefik.frontend.rule=PathPrefixStrip:/abcd"
       - "traefik.port=80"
       - "traefik.docker.network=!!TRAEFIK_NETWORK_NAME!!"
      

  #Der Newspage-Service
  newspage:
    image: "manager1:5000/cd/newspage:!!NEWSPAGE_VERSION!!"
    ports:
     - "0:8081"
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
    deploy:
      mode: "replicated"
      replicas: 5
      labels:
       - "traefik.frontend.rule=PathPrefixStrip:/newspage"
       - "traefik.port=8081"
       - "traefik.docker.network=!!TRAEFIK_NETWORK_NAME!!"
      resources:
        limits:
          cpus: "0.25"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
      restart_policy:
        condition: "on-failure"
        delay: 10s
        max_attempts: 3
        window: 60s
      update_config:
        parallelism: 1
        delay: 2s
        failure_action: continue
        monitor: 60s
        max_failure_ratio: 0.5

  #Cluster aus Mongo DBs für den Newspage-Service
  newspage-mongo:
    image: "manager1:5000/cd/newspage-mongo:!!NEWSPAGE_MONGO_VERSION!!"
    ports:
     - "0:27017"
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
    depends_on:
     - redis
    deploy:
      mode: replicated
      replicas: 1


  #Commentsservice
  commentsservice:
    image: "manager1:5000/cd/commentsservice:!!COMMENTSSERVICE_VERSION!!"
    ports:
     - "0:8080"
    deploy:
      mode: replicated
      replicas: 1
      labels:
       - "traefik.frontend.rule=PathPrefixStrip:/commentsservice"
       - "traefik.port=8080"
       - "traefik.docker.network=!!TRAEFIK_NETWORK_NAME!!"

  #Mongo DB für den Commentsservice
  commentsservice-mongo:
    image: "mongo"
    ports:
     - "0:27017"
    logging:
      driver: gelf
      options:
        gelf-address: udp://localhost:12201
    deploy:
      mode: replicated
      replicas: 1

#Es wird ein Overlay-Network erstellt, indem alle Container laufen
networks:
  default: #Name des network ist default
    driver: overlay
    ipam:
      driver: default
    #  config:
    #   - subnet: 192.168.70.0/24
