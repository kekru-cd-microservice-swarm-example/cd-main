Vagrant.configure(2) do |config|
  
  config.vm.box = "ubuntu/trusty64"
  
  config.vm.hostname = "manager1"
  
  #Wait max 10 minutes (600 seconds) to start VM without provisioning
  config.vm.boot_timeout = 600
  
  #config.ssh.password = "vagrant"
  
  #Docker installieren, wenn noch nicht installiert
  config.vm.provision "shell", inline: "command -v docker >/dev/null 2>&1 || curl -fsSL https://test.docker.com/ | sh"
  config.vm.provision "shell", inline: "sudo usermod -aG docker vagrant"
  
  #Registry auf manager1:5000 zulassen
  config.vm.provision "shell", inline: "sudo chmod 666 /etc/default/docker"
  config.vm.provision "shell", inline: "sudo echo 'DOCKER_OPTS=\"--insecure-registry manager1:5000\"' >> /etc/default/docker"
  config.vm.provision "shell", inline: "sudo service docker restart"
  
  #Alte Docker Container stoppen und loeschen
  config.vm.provision "shell", inline: "sh -c 'docker stop $(docker ps -aq) && docker rm $(docker ps -aq); true'"
  
  config.vm.provision "shell", inline: "echo 'Europe/Berlin' > /etc/timezone && dpkg-reconfigure -f noninteractive tzdata"
  
  #1GB RAM for VM
  config.vm.provider :virtualbox do |p|
    p.customize ["modifyvm", :id, "--memory", 1024]
  end
  
    
  config.vm.define "manager1" do |machine|
	machine.vm.provider :virtualbox do |p|
		p.customize ["modifyvm", :id, "--memory", 2048]
	end
  
    machine.vm.hostname = "manager1"
	machine.vm.network "private_network", ip: "10.1.6.210"
	machine.vm.provision :hosts, :sync_hosts => true #DNS fÃ¼r die drei Maschinen. Hierfuer muss vagrant-hosts installiert werden: "vagrant plugin install vagrant-hosts"
	
	#Registry starten
	machine.vm.provision "shell", inline: "sudo mkdir --parents /data/registry"
	machine.vm.provision "shell", inline: "docker run --name registry -d -p 5000:5000 -v /data/registry:/var/lib/registry registry"
	
	#Jenkins starten
	machine.vm.provision "shell", inline: "sudo mkdir --parents /data/jenkins"
	machine.vm.provision "shell", inline: "sudo chmod 777 /data/jenkins"
	machine.vm.provision "shell", inline: "docker build -t myjenkins /vagrant/jenkins" 
	machine.vm.provision "shell", inline: "docker run --name jenkins -d -p 8080:8080 -p 8079:50000 -v /data/jenkins:/var/jenkins_home myjenkins"
	
	#Swarm Visualizer starten
	machine.vm.provision "shell", inline: "sudo chmod 666 /var/run/docker.sock"
	machine.vm.provision "shell", inline: "docker run --name swarmvisualizer -d -p 8081:8080 -v /var/run/docker.sock:/var/run/docker.sock:ro manomarks/visualizer"
	
	#Docker Remote API nach auÃŸen verfuegbar machen (ungesichert)
	machine.vm.provision "shell", inline: "docker run --name remoteapi -d -p 2375:2375 -v /var/run/docker.sock:/var/run/docker.sock:ro jarkt/docker-remote-api"
  end

  config.vm.define "worker1" do |machine|
    machine.vm.hostname = "worker1"
	machine.vm.network "private_network", ip: "10.1.6.211"
	machine.vm.provision :hosts, :sync_hosts => true
  end
  
  config.vm.define "worker2" do |machine|
    machine.vm.hostname = "worker2"
	machine.vm.network "private_network", ip: "10.1.6.212"
	machine.vm.provision :hosts, :sync_hosts => true
  end

end